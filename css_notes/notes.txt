* {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}

Öncelik sırası önce id, sonra class, sonra element (media query bir önceliği yok o nedenle en sona yazılır)

Saat yönü margin: 2px 3px 4px 5px (top-right-bottom-left), margin: 2px 3px 4px (top-right=left-bottom), margin: 2px 3px (top=bottom-right=left), margin: 2px (top=bottom=right=left)
div {
  max-width: 500px;
  margin: auto;
  border: 1px solid red;
}
p.ex1 {
  margin: inherit; inherited from the parent element (<div>)
}

margin collapseyi engellemek için border veya padding ver

box-shadow: inset 0px 0px 5px red;  inset gölgeyi iç tarafa yansıtır
border-bottom: 6px solid red;
https://www.w3schools.com/css/css_border.asp

.fontörnek{
  font-size: 16px;
  font-family: Arial, Helvetica, sans-serif;
  font-weight: bold;
  font-style: italic;
  letter-spacing: 2px;
  line-height: 30px;
  word-spacing: 10px;
  color: darkblue;
}
p::first-letter{
  font-size: 40px;
}
span{
  text-transform: uppercase;
}

line-height: 2 elementin mevcut olacak fontsize'ının 2 katını uygular

body {
  background-image: url("img_tree.png");
  background-repeat: no-repeat;
  background-position: center;
  background-attachment: fixed;
} https://www.w3schools.com/css/css_background_shorthand.asp

list-style-image:url(./images/home.svg)

fontawesome:
https://cdnjs.com/libraries/font-awesome
En üst seçenek, ortadaki linki kopyala ve html head içine koy. 
https://fontawesome.com/search?q=home&o=r istediğin free ikonu kullan

: iki nokta ile verilen css özelliklerine pseudo-classes denir. Var olan bir elementi seçer.
https://www.w3schools.com/css/css_pseudo_classes.asp
:first-child :last-child :nth-child(3) :nth-child(even) :visited :link :active :hover :focus

pseudo-elementte ise çift iki nokta ile :: kullanılır. olmayan bir elementi oluşturur.
ul li:nth-child(3):hover::after{content:"❤️"}
VScode widows + . emoji ekler

bem notasyonu google'da arat

em bir üst taşıyıcısına bakar, rem root'a bakar(16px)
html{
  font-size:30px verirsen 1 rem 30px olur
}

1vmin = 1vw or 1vh, whichever is smaller

width:50% parentının yarısını kadar olur
width:50vw tarayıcının yarısını kadar olur

Html'de img'den sonra arkaplanı kırmızı olan p var ise ve içinde yazı var ise img'ye float: left verdiğinde img yüzdüğünden altı kırmızı olur ama yazı img altına girmez
Yeni bir p daha ekle fakat yeni p nin floattan etkilenmemesini istiyorsan:
1-iki p arasına classı clear olan boş div koy. css de bu dive clear:left(veya both) özelliği ver
2-boş div koyma, direk ikinci p ye clear:left ver
Eğer bir main taşıyıcı varsa içindekiler float ise main lastik gibi büzülür. Bunu önlemek için:
3-Main'e clearfix diye sınıf ver. Css'e de şunu ekle 
.clearfix::after{
  content:'';
  clear:both;
  display:block;
}

display: none; direk akıştan çıkar
visibility: hidden; akıştan çıkmaz ama görüntüsü görünmez

Yazı taşma ihtimalli varsa en manıklısı overflow: auto

1-RELATIVE
Mevcut konuma göre yukardan 10px uzaklaştır
position: relative;
top: 10px;

2-FIXED
Bütün sayfayı baz alarak yukardan 10px uzaklaştır. Scroll'dan etkilenmez
position: fixed;
top: 10px;

3-ABSOLUTE
position:absolute var ise taşıyıcısında position:relative olmak zorunda. taşıyıcısına göre konumlanır.

4-STICKY
fix hep sabit iken sticky sayfanın en üstüne kadar scrool ile kayar, en üstte sabit kalır ama taşıyıcısı scrool ile yok olurken sticky de yok olur.

Z-index sadece display:flex'de, display:grid'de veya yukardaki 4 tane positionda çalışır
z-index:0 html akışındaki yeri, 1 sıfırın onun üstünde, 2 birin üstünde

https://www.w3schools.com/css/css_positioning.asp

css combinators:
div   p{} div altında ne kadar p varsa seçer
div > p{} div in çocuk p lerini seçer ama torun p lerini seçmez
div + p{} div den sonra aynı levelda olan ilk p
div ~ p{} div den sonra aynı levelda olan tüm p ler

align-contentin align-itemsdan farkı içeriği grup olarak hareket ettirmesi
align-items: baseline yazıya göre ortalar

taşıyıcıda flex-wrap:wrap var:
çocukta flex-basis:100% var ise tüm satırı kaplar, diğerlerini aşağı atar
çocukta flex-grow:1 var ise kalan alanı kaplar ama diğerlerini aşağı atmaz
"flex: 2;" flex-grow:2 anlamına gelir genelde flex: 2 kullanılır
flex:yüzdeli em li remli bişey kullanırsan flex-basis anlamına gelir çünkü grow ve shrink bunları alamaz sadece rakam alabilir
https://developer.mozilla.org/en-US/docs/Web/CSS/flex?retiredLocale=tr
eğer flex olan elamanlar küçülürken birinini hiç küçülmemesini istiyorsan ona flex-shrink:0 ver
flex-grow yerine width:yüzde de verebilirsin

The flex container properties are:
flex-direction: column,row, column-reverse, row-reverse 
flex-wrap:wrap, nowrap
flex-flow: row wrap .It is shorthand property for setting both the flex-direction and flex-wrap properties.
justify-content: center, space-around, space-between, flex-start, flex-end;
align-items: center, baseline,flex-start, stretch(default) 
align-content: space-between, space-around

The flex item properties are: https://www.w3schools.com/css/css3_flexbox_items.asp
order
flex-grow
flex-shrink
flex-basis
flex: 50%
align-self

@media screen and (max-width: 480px)
@media screen and (min-width: 481px) and (max-width: 768px) 
@media screen and (orientation: landscape) 
@media (400px <= width <= 700px)
@media (height > 600px) 

theme.css dosyası içinde:
@import url("https://fonts.googleapis.com/css2?family.............)
:root {
  /* #mavi tonları */
  --blue-1: hsl(205, 100%, 30%);
  --blue-2: hsl(205, 100%, 40%);
/* fontlar */
  --ff-roboto: "Roboto";
  --ff-prosto: "Prosto One", cursive;
/* font size */
  --fs-3xl:3rem;
  --fs-2xl:2rem;
/* line height */
  --line-xl:2;
/* shadow */
  --shadow-dark:0 0 20px rgba(0,0,0,0.8);
  --shadow-light:0 0 20px rgba(0,0,0,0.2)}
  Daha sonra başka bir css dosyası içine bunu import et:
  @import "./theme.css";
  /* var ile bu değişkenleri kullanıyoruz */
h1{
    color:var(--baslikRengi);
    font-size:calc(var(--standatOlcu)*3);
}
p{
    font-family: var(--ff-coriur);
    font-size:var(--s-3xl)}

GRID:
1-
<div class="container">
  <div class="content content1"></div>
  <div class="content content2"></div>.....
  <div class="content content9"></div>
</div>
.container{
    display: grid;
    grid-template-columns: 200px 400px 200px; column istediği kadar olabilir ama yine de en fazla 12 ver 
    grid-template-rows: 200px 200px 300px;
    3 e 3 yani 9 luk bir grid oluşturur
    gap: 10px;
}
2-
.container{
    height: 100vh;
    display: grid;
    grid-template-columns: 1fr 2fr 1fr; veya rem olarak veya yüzde olarak da verebilirsin. veya fr lerden birinin yerine min-content, max-content(çok tevsiye edilmez) kullanabilirsin
    grid-template-rows: repeat(5, 1fr); rowa fr verebilmen için height değeri vermelisin 
}
.content1{ 1.sütundan başlar, 3.sütuna kadar gider. ilk 2 sütunluk yer kaplar.
    grid-column-start:1 ;
    grid-column-end: 3;
}
.content2{ 1.sütundan başlar, 2.sütuna kadar gider. sadece ilk sütunluk yer kaplar
           2.satırdan başlar, 4.satıra kadar gider. 2 satırlık yer kaplar.
    grid-column-start:1 ;
    grid-column-end: 2;
    grid-row-start:2 ;
    grid-row-end: 4;
}
.content3{ 2.satır ve 2.sütundan başlar 4.satır ve 4.sütuna kadar gider. 
    grid-row: 2/4 ;
    grid-column: 2/4;
}
.content4{ 2.satır ve 2.sütundan başlar, 2 şer birim ilerler yani yukardaki ile aynı anlama gelir
    grid-row: 2 / span 2;
    grid-column: 2 / span 2;
}
.content5{ 
  /* row-start / col-start / row end /col-end */
  grid-area: 4/2/6/4;
}
3-
<div class="wrapper">
        <div class="container">
            <div class="content content1">Header</div>
            <div class="content content2">Footer</div>
            <div class="content content3">aside</div>
            <div class="content content4">main</div>
            <div class="content content5">section</div>
        </div>
</div>
.wrapper{ grid justify content:center ile yatayda ortalanır ama dikeyde align items:center ile ortalanmaz. Dikeyde ortalamak için gridi div içine al ve flex kullan
    height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
}
.container{
    display: grid;
    grid-template-columns:  100px 300px 100px;
    grid-template-rows: 100px 400px 100px ;
    grid-template-areas:
    "header header header"
    "sidebar main section"
    "footer footer footer";
}
.content{
    border: 1px solid;
    display: flex;
    justify-content: center;
    align-items: center;
}
.content1{
    background-color: coral;
    grid-area: header;
}
.content2{
    background-color: fuchsia;
    grid-area: footer;
}
.content3{
    background-color: gold;
    grid-area: aside;
}
.content4{
    background-color: olive;
    grid-area: main;
}
.content5{
    background-color: crimson;
    grid-area: section;
}

column-gap: 50px;
row-gap: 50px;

TRANSFORM bu özellikleri active ile verirsen tıklanma bitince eski haline geri döner
transform: rotateX(180deg);
transform: scaleX(1.5); veya scale(95%)
transform: skew(20deg, 20deg);
transform: translateX(50px); translate(100% 100%);

TRANSITION
transition: width 2s, height 4s; sadece genişlikteki değişiklikleri 2sn'de yap, sadece yükseklikteki değişiklikleri 4sn'de yap
transition: all; herşeyine uygular
transition-property: width; height veya all (farklı yolar ile aynı şey yapılabilir)
transition-property: transform 1s; sadece hareketi 1 snde değiştirir, rengin de değişmesini istiyorsan all ver (ayrı ayrı da verebilirsin yani 1 sn yi delay ile verebilirsin)
transition-delay: 1 s; örneğin hover yaptıktan 1 sn sonra değişikliği uygular
transition-duration: 2 s;
Eğer transition: height ve transition-duration: 2 sn verirsen ve hover ile genişlik ve yükseklik değiştirirsen yükseklik 2 snde değişir ama genişlik hemen değişir
transition-timing-function: linear sabit hızla yapar
transition-timing-function: ease (default) yavaş başlar hızlanır yavaş bitirir
transition-timing-function: ease-in yavaş başlar 
transition-timing-function: ease-out yavaş bitirir

best practise:
.xy{
    background-color: magenta;
    transition: all 2s ease-out;    .5s (bu 0.5 sn demek)
}
.xy:active{
    background-color: green;
    transform: translate(150px, 50px) scale(3);
}

ANIMATION:
Bazı özelliklerin sürekliliğini sağlar
@keyframes ile animasyon tanımlanır
uygulanacak elemente de şu verilir:
/* animation: name duration timing-function delay iteration-count direction fill-mode; */
animation-name: example;
animation-duration: 3s;
animation-delay: 3s;
animation-iteration-count: 2; animasyon 2 kere tekrar eder. infinite yazarsan sonsuz kere tekrar eder
animation-direction: normal(default, forwards), reverse, alternate(git gel, gittiği yerden geri gelir) veya alternate-reverse(kısır döngü gibi git)
animation-fill-mode: animasyon bittiğinde ne olacak none(default), forwards(en son nerede bitti ise orada kal), backwards(en başta ve delay kısmında da animasyon başlangıç özelliklerini göster), both(forwards ve backwards her iki özellik birden)

@keyframes example {
from{}
to{} başlangıçtan sonuna kadar verir
}
@keyframes example {
    0%{ Zamanı 4 eşit parçaya böler
        transform: translateX(0);
        background-color: orange;
    }
    25%{
        transform: translateY(100%);
        border-radius: 50%;
    }
    50%{
        transform: translate(100%, 100%);
    }
    75%{
        transform: translateX(50%);
    }
    100%{
        transform: translateX(100%);
    }
}

https://www.w3schools.com/css/css3_object-fit.asp
img için "object-fit: cover" The image keeps its aspect ratio and fills the given dimension. The image will be clipped to fit

If the max-width property is set to 100%, the image will scale down if it has to, but never scale up to be larger than its original size
img {
  max-width: 100%;
  height: auto;
}

https://www.w3schools.com/css/css3_masking.asp

div {
  opacity: 0.3;
}div içindeki yazılar dahil herşey saydam olur
div {
  background: rgba(76, 175, 80, 0.3) /div içindeki yazı saydam olmaz
}

sticky navbar https://www.w3schools.com/css/css_navbar_horizontal.asp

html {
  background: url(img_man.jpg) no-repeat center fixed;
  background-size: cover;
}

https://www.w3schools.com/css/css3_backgrounds.asp

.hero-image {
  background: url(img_man.jpg) no-repeat center; 
  background-size: cover;
  height: 500px;
  position: relative;
}

.hero-text {
  text-align: center;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  color: white;
}

h1 {
  text-shadow: 2px 2px 5px red;
} https://www.w3schools.com/css/css3_shadows.asp

div.card {
  width: 250px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
  text-align: center;
} https://www.w3schools.com/css/css3_shadows_box.asp

https://www.w3schools.com/cssref/pr_text_white-space.php
https://www.w3schools.com/css/css3_text_effects.asp
overflow: hidden; ve text-overflow: ellipsis; birlikte kullan

https://www.w3schools.com/css/tryit.asp?filename=trycss_buttons_animate1

burada kaldım https://www.w3schools.com/css/css3_multiple_columns.asp

div {
  border: 2px solid;
  padding: 20px; 
  width: 300px;
  resize: vertical;
  overflow: auto;
} https://www.w3schools.com/css/css3_user_interface.asp

@media screen and (min-width: 481px) and (max-width: 768px) {}
@media screen and (max-width: 900px) and (min-width: 600px), (min-width: 1100px) {}
@media screen and (orientation: landscape) {}

@media (min-width: 600px) {} @media (width >= 600px) {}
@media (min-width: 400px) and (max-width: 1000px) {} @media (400px <= width <= 1000px) {}

.btn-up:hover i{} btn-up'ın hoverında iken  i'yi değiştirir